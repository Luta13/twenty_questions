Index: src/camp/CampManagementApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package camp;\r\n\r\nimport camp.model.*;\r\n\r\nimport java.util.*;\r\n\r\n/**\r\n * Notification\r\n * Java, 객체지향이 아직 익숙하지 않은 분들은 위한 소스코드 틀입니다.\r\n * main 메서드를 실행하면 프로그램이 실행됩니다.\r\n * model 의 클래스들과 아래 (// 기능 구현...) 주석 부분을 완성해주세요!\r\n * 프로젝트 구조를 변경하거나 기능을 추가해도 괜찮습니다!\r\n * 구현에 도움을 주기위한 Base 프로젝트입니다. 자유롭게 이용해주세요!\r\n */\r\npublic class CampManagementApplication {\r\n    // 데이터 저장소\r\n    private static List<Student> studentStore;\r\n    private static List<Subject> subjectStore;\r\n    private static List<Score> scoreStore;\r\n\r\n    // 과목 타입\r\n    private static String SUBJECT_TYPE_MANDATORY = \"MANDATORY\";\r\n    private static String SUBJECT_TYPE_CHOICE = \"CHOICE\";\r\n\r\n    // index 관리 필드\r\n    private static int studentIndex = 0;\r\n    private static final String INDEX_TYPE_STUDENT = \"ST\";\r\n    private static int subjectIndex = 0;\r\n    private static final String INDEX_TYPE_SUBJECT = \"SU\";\r\n    private static int scoreIndex = 0;\r\n    private static final String INDEX_TYPE_SCORE = \"SC\";\r\n\r\n\r\n    // 스캐너\r\n    private static Scanner sc = new Scanner(System.in);\r\n\r\n    public static void main(String[] args) {\r\n        setInitData();\r\n        try {\r\n            displayMainView();\r\n        } catch (Exception e) {\r\n            System.out.println(\"\\n오류 발생!\\n프로그램을 종료합니다.\");\r\n        }\r\n    }\r\n\r\n    // 초기 데이터 생성\r\n    private static void setInitData() {\r\n        studentStore = new ArrayList<>();\r\n        subjectStore = new ArrayList<>();\r\n        scoreStore = new ArrayList<>();\r\n    }\r\n\r\n    // index 자동 증가\r\n    private static String sequence(String type) {\r\n        switch (type) {\r\n            case INDEX_TYPE_STUDENT -> {\r\n                studentIndex++;\r\n                return String.valueOf(studentIndex);\r\n            }\r\n            case INDEX_TYPE_SUBJECT -> {\r\n                subjectIndex++;\r\n                return String.valueOf(subjectIndex);\r\n            }\r\n            default -> {\r\n                scoreIndex++;\r\n                return String.valueOf(scoreIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static void displayMainView() throws InterruptedException {\r\n        boolean flag = true;\r\n        while (flag) {\r\n            System.out.println(\"\\n==================================\");\r\n            System.out.println(\"내일배움캠프 수강생 관리 프로그램 실행 중...\");\r\n            System.out.println(\"1. 수강생 관리\");\r\n            System.out.println(\"2. 점수 관리\");\r\n            System.out.println(\"3. 프로그램 종료\");\r\n            System.out.print(\"관리 항목을 선택하세요: \");\r\n            int input = sc.nextInt();\r\n\r\n            switch (input) {\r\n                case 1 -> displayStudentView(); // 수강생 관리\r\n                case 2 -> displayScoreView(); // 점수 관리\r\n                case 3 -> flag = false; // 프로그램 종료\r\n                default -> {\r\n                    System.out.println(\"잘못된 입력입니다.\\n되돌아갑니다!\");\r\n                    Thread.sleep(2000);\r\n                }\r\n            }\r\n        }\r\n        System.out.println(\"프로그램을 종료합니다.\");\r\n    }\r\n\r\n    private static void displayStudentView() {\r\n        boolean flag = true;\r\n        while (flag) {\r\n            System.out.println(\"==================================\");\r\n            System.out.println(\"수강생 관리 실행 중...\");\r\n            System.out.println(\"1. 수강생 등록\");\r\n            System.out.println(\"2. 수강생 목록 조회\");\r\n            System.out.println(\"3. 메인 화면 이동\");\r\n            System.out.print(\"관리 항목을 선택하세요: \");\r\n            int input = sc.nextInt();\r\n\r\n            switch (input) {\r\n                case 1 -> createStudent(); // 수강생 등록\r\n                case 2 -> inquireStudent(); // 수강생 목록 조회\r\n                case 3 -> flag = false; // 메인 화면 이동\r\n                default -> {\r\n                    System.out.println(\"잘못된 입력입니다.\\n메인 화면 이동...\");\r\n                    flag = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // 수강생 등록\r\n    private static void createStudent() {\r\n        System.out.println(\"\\n수강생을 등록합니다...\");\r\n\r\n        // 수강생 입력\r\n        System.out.print(\"수강생 이름 입력: \");\r\n        String studentName = sc.next();\r\n        Student student = new Student(sequence(INDEX_TYPE_STUDENT), studentName, subjectStore);\r\n        studentStore.add(student);\r\n\r\n        // 기능 구현 (필수 과목, 선택 과목)\r\n        System.out.println(\"필수 과목 목록(최소 3개 이상)\");\r\n        System.out.println(\"1. Java\");\r\n        System.out.println(\"2. 객체지향\");\r\n        System.out.println(\"3. Spring\");\r\n        System.out.println(\"4. JPA\");\r\n        System.out.println(\"5. MySQL\");\r\n        System.out.println(\"필수 과목 입력 예시 -> Java, 객체지향, Spring\");\r\n        System.out.print(\"필수 과목 입력: \");\r\n\r\n        if (sc.hasNextLine()) {\r\n            sc.nextLine();\r\n        }\r\n\r\n        String subjectString = sc.nextLine();\r\n        String[] SubjectsInput = subjectString.split(\",\");\r\n\r\n        for (int i = 0; i < SubjectsInput.length; i++) {\r\n            subjectStore.add(new Subject(sequence(INDEX_TYPE_SUBJECT), SubjectsInput[i], SUBJECT_TYPE_MANDATORY));\r\n        }\r\n\r\n        // 선택 과목 입력\r\n        System.out.println(\"선택 과목 목록(최소 2개 이상)\");\r\n        System.out.println(\"1. 디자인 패턴\");\r\n        System.out.println(\"2. Spring Security\");\r\n        System.out.println(\"3. Redis\");\r\n        System.out.println(\"4. MongoDB\");\r\n        System.out.println(\"선택 과목 입력 예시 -> 디자인 패턴, Spring Security\");\r\n        System.out.print(\"선택 과목 입력: \");\r\n        String subjectString2 = sc.nextLine();\r\n        String[] SubjectsInput2 = subjectString2.split(\",\");\r\n\r\n        for (int i = 0; i < SubjectsInput2.length; i++) {\r\n            subjectStore.add(new Subject(sequence(INDEX_TYPE_SUBJECT), SubjectsInput2[i], SUBJECT_TYPE_CHOICE));\r\n        }\r\n\r\n        for (int i = 0; i < subjectStore.size(); i++) {\r\n            System.out.println(subjectStore.get(i).getSubjectName() + \" - \" + subjectStore.get(i).getSubjectType());\r\n        }\r\n        //한 학생의 과목 추가가 끝나면 초기화\r\n        //현재 학생의 모든 회차에 대한 (과목 및 시험점수등) 디폴트값 적용 시키기\r\n        for (int i = 1; i <= 10; i++) {\r\n            Round round = new Round(i);\r\n            for (Subject subject : student.getSubjects()) {\r\n                round.addSubject(subject);\r\n            }\r\n            student.addRoundSubjectsMap(round);\r\n        }\r\n        subjectStore = new ArrayList<>();\r\n    }\r\n\r\n\r\n    private static void inquireStudent() {\r\n        System.out.println(\"\\n수강생 목록을 조회합니다...\");\r\n        // 기능 구현\r\n        if (studentStore.isEmpty()) {\r\n            System.out.println(\"등록된 수강생이 없습니다.\");\r\n        } else {\r\n            for (Student stu_inquiry : studentStore) {\r\n                System.out.println(stu_inquiry.getStudentId() + \" - \" + stu_inquiry.getStudentName());\r\n            }\r\n        }\r\n        System.out.println(\"\\n수강생 목록 조회 성공!\");\r\n    }\r\n\r\n    private static void displayScoreView() {\r\n        boolean flag = true;\r\n        while (flag) {\r\n            System.out.println(\"==================================\");\r\n            System.out.println(\"점수 관리 실행 중...\");\r\n            System.out.println(\"1. 수강생의 과목별 시험 회차 및 점수 등록\");\r\n            System.out.println(\"2. 수강생의 과목별 회차 점수 수정\");\r\n            System.out.println(\"3. 수강생의 특정 과목 회차별 등급 조회\");\r\n            System.out.println(\"4. 메인 화면 이동\");\r\n            System.out.print(\"관리 항목을 선택하세요...\");\r\n            int input = sc.nextInt();\r\n            sc.nextLine();\r\n\r\n            switch (input) {\r\n                case 1 -> createScore(); // 수강생의 과목별 시험 회차 및 점수 등록\r\n                case 2 -> updateRoundScoreBySubject(); // 수강생의 과목별 회차 점수 수정\r\n                case 3 -> inquireRoundGradeBySubject(); // 수강생의 특정 과목 회차별 등급 조회\r\n                case 4 -> flag = false; // 메인 화면 이동\r\n                default -> {\r\n                    System.out.println(\"잘못된 입력입니다.\\n메인 화면 이동...\");\r\n                    flag = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static String getStudentId() {\r\n        System.out.print(\"\\n관리할 수강생의 번호를 입력하시오...\");\r\n        return sc.next();\r\n    }\r\n\r\n    // 수강생의 과목별 시험 회차 및 점수 등록\r\n    private static void createScore() {\r\n        //학생찾기결과를 Optional 로 반환받음\r\n        System.out.println(\"어떤 수강생의 과목별 시험 회차 및 점수 등록하시겠습니까? //이름을 입력해주세요!\");\r\n        String name = sc.nextLine();\r\n        Optional<String> findStudentId = studentStore.stream().filter(student -> student.getStudentName().equals(name)).map(Student::getStudentId).findFirst();\r\n\r\n        //학생찾기 성공했을시, ture,false 반환\r\n        if (findStudentId.isPresent()) {\r\n            //여기까지왔다는건 무조건 findStudentId가 있다는 뜻이므로, 옵셔널 상자 개봉후, 값 반환\r\n            //일단 삭제 고려안함, idx 고려 배제\r\n            Student student = studentStore.get(Integer.parseInt(findStudentId.get()) - 1);\r\n            boolean flag = true;\r\n\r\n\r\n            //학생의 필수과목 점수 기재공간\r\n            while (flag) {\r\n                System.out.println(\"'\" + student.getStudentName() + \"'의 점수를 등록하실, 필수/선택 과목을 골라주세요 //번호를 입력해주세요!\");\r\n                System.out.println(\"1. 필수 2. 선택 3. 나가기\");\r\n                int input = sc.nextInt();\r\n\r\n                //사용자가 번호를 눌렀을때 해당 필수과목으로 찾게하기위한 List\r\n                List<String> MmandatorySubjectList = new ArrayList<>();\r\n                //필수\r\n                if (input == 1) {\r\n                    System.out.println(\"'몇 회차' 과목의 점수를 등록 하시겠습니까?\");\r\n                    int count = sc.nextInt();\r\n                    sc.nextLine();\r\n                    System.out.println(\"현재 \" + student.getStudentName() + \" 학생의 \" + count + \"회차 필수과목 점수 등록 현황 상태입니다.\");\r\n                    //현재 학생의 n 회차까지 데이터 저장 값들\r\n                    int i = 1;\r\n                    for (Map.Entry<String, Score> subject : student.getSubjectsMap(count).getSubjects().entrySet()) {\r\n                        //필수과목 일때만\r\n                        if (subject.getValue().getSubject().getSubjectType().equals(SUBJECT_TYPE_MANDATORY)) {\r\n                            MmandatorySubjectList.add(subject.getKey());\r\n                            if (subject.getValue().getScore() == -1)\r\n                                //점수 등록이 안됐다면\r\n                                System.out.print(i + \".\" + subject.getKey() + \" : \" + \"[점수미등록] \");\r\n                                //점수 등록이 됐다면\r\n                            else\r\n                                System.out.print(i + \".\" + subject.getKey() + \" : \" + subject.getValue().getScore() + \"점 \");\r\n                            ++i;\r\n                        }\r\n                    }\r\n                    System.out.println();\r\n                    Round round = new Round(count);\r\n                    System.out.println(count + \"회차의 어떤 '과목'의 점수를 등록 하시겠습니까? //번호를 입력해주세요!\");\r\n                    int subjectNumber = sc.nextInt();\r\n                    String subject = MmandatorySubjectList.get(subjectNumber - 1);\r\n\r\n                    System.out.println(count + \"회차의 \" + subject + \" 과목에 대해 '점수'를 등록 해주세요\");\r\n                    int intScore = sc.nextInt();\r\n                    // n회차에대한 과목,점수 저장\r\n                    round.setSubject(student.getSubjectsMap(count).getSubject(subject), intScore);\r\n                    student.getSubjectsMap(count).getSubject(subject).setMandatoryRank(intScore);\r\n                    System.out.println(\"등록이 정상적으로 마무리 되었습니다 !\");\r\n\r\n                    //선택\r\n                } else if (input == 2) {\r\n                    System.out.println(\"'몇 회차' 과목의 점수를 등록 하시겠습니까?\");\r\n                    int count = sc.nextInt();\r\n                    sc.nextLine();\r\n                    //사용자가 번호를 눌렀을때 해당 과목으로 찾게하기위한 List\r\n                    List<String> choiceSubjectList = new ArrayList<>();\r\n                    System.out.println(\"현재 \" + student.getStudentName() + \" 학생의 \" + count + \"회차 선택과목 점수 등록 현황 상태입니다. //번호를 입력해주세요!\");\r\n                    //현재 학생의 n 회차까지 데이터 저장 값들\r\n                    int i = 1;\r\n                    for (Map.Entry<String, Score> subject : student.getSubjectsMap(count).getSubjects().entrySet()) {\r\n                        //선택과목 일때만\r\n                        if (subject.getValue().getSubject().getSubjectType().equals(SUBJECT_TYPE_CHOICE)) {\r\n                            choiceSubjectList.add(subject.getKey());\r\n                            if (subject.getValue().getScore() == -1)\r\n                                //등록이 됐다면\r\n                                System.out.print(i + \".\" + subject.getKey() + \" : \" + \"[점수미등록] \");\r\n                                //점수 등록이 됐다면\r\n                            else\r\n                                System.out.print(i + \".\" + subject.getKey() + \" : \" + subject.getValue().getScore() + \"점 \");\r\n                            ++i;\r\n                        }\r\n                    }\r\n                    System.out.println();\r\n                    Round round = new Round(count);\r\n                    int subjectNumber = sc.nextInt();\r\n                    String subject = choiceSubjectList.get(subjectNumber - 1);\r\n\r\n                    System.out.println(count + \"회차의 \" + subject + \" 과목에 대해 '점수'를 등록 해주세요\");\r\n                    int score = sc.nextInt();\r\n\r\n                    // n회차에대한 과목,점수 저장\r\n                    round.setSubject(student.getSubjectsMap(count).getSubject(subject), score);\r\n                    student.getSubjectsMap(count).getSubject(subject).setChoiceRank(score);\r\n                    System.out.println(student.getSubjectsMap(count).getSubject(subject).getChoiceRank());\r\n                    System.out.println(\"등록이 정상적으로 마무리 되었습니다 !\");\r\n                } else {\r\n                    flag = false;\r\n                    return;\r\n                }\r\n                //sc.nextInt() 하고나서는 개행문자 하나 새로생겨서 다음 작업에 오차 생길수있기떄문에, 하나 미리 띄어두기\r\n                sc.nextLine();\r\n            }\r\n\r\n            // ===== 랑 같이 출력되서 한줄 띄어줌\r\n            System.out.println();\r\n            return;\r\n            //학생찾기 실패시, 해당 함수 종료시키면서 돌려보냄\r\n        } else {\r\n            System.out.println(\"학생이 존재하지않습니다!\");\r\n            return;\r\n        }\r\n    }\r\n\r\n    // 수강생의 과목별 회차 점수 수정 메서드\r\n    private static void updateRoundScoreBySubject() {\r\n        System.out.print(\"점수를 수정할 수강생의 이름을 입력하세요: \");\r\n        String studentName = sc.nextLine();\r\n\r\n        // 점수 수정할 수강생 이름 찾기\r\n        Student student = studentStore.stream().filter(stu -> stu.getStudentName().equalsIgnoreCase(studentName)) // equalsIgnoreCase : 비교 시 대소문자 구분 X\r\n                .findFirst().orElse(null);\r\n\r\n        // 해당 수강생이 존재하지 않는다면\r\n        if (student == null) {\r\n            System.out.println(\"해당 이름을 가진 수강생이 존재하지 않습니다. 점수 관리 화면으로 재이동합니다.\");\r\n            return;\r\n        }\r\n\r\n        // 점수 수정할 회차 입력\r\n        System.out.print(\"점수를 수정할 회차를 입력하세요: \");\r\n        int roundNumber = sc.nextInt();\r\n        sc.nextLine(); // 개행문자 처리\r\n\r\n\r\n        Round round = student.getSubjectsMap(roundNumber);\r\n\r\n        // 수정할 과목 선택\r\n        System.out.println(roundNumber + \"회차의 수정할 과목을 선택하세요:\");\r\n        List<String> subjectList = new ArrayList<>();\r\n        int i = 1;\r\n        for (Map.Entry<String, Score> entry : round.getSubjects().entrySet()) {\r\n            System.out.println(i + \". \" + entry.getKey() + \" - 현재 점수: \" + (entry.getValue().getScore() == -1 ? \"[점수미등록]\" : entry.getValue().getScore() + \"점\"));\r\n            subjectList.add(entry.getKey());\r\n            i++;\r\n        }\r\n\r\n        // 수정할 과목 번호 입력\r\n        System.out.print(\"수정할 과목 번호를 입력하세요: \");\r\n        int subjectNumber = sc.nextInt();\r\n        sc.nextLine(); // 개행문자 처리\r\n\r\n        // 잘못된 번호 입력시\r\n        if (subjectNumber < 1 || subjectNumber > subjectList.size()) {\r\n            System.out.println(\"잘못된 번호입니다.\");\r\n            return;\r\n        }\r\n\r\n\r\n        // 수정할 점수 입력\r\n        String subjectName = subjectList.get(subjectNumber - 1);\r\n        int newScore = -1;\r\n        boolean validScore = false;\r\n\r\n        // 입력된 점수 검증 로직 -> 0 ~ 100 범위 밖이거나 숫자가 아닌 경우 재입력 요구\r\n        while (!validScore) {\r\n            System.out.print(\"새 점수를 입력하세요 (0 ~ 100): \");\r\n            if (sc.hasNextInt()) {\r\n                newScore = sc.nextInt();\r\n                sc.nextLine(); // 개행문자 처리\r\n\r\n                if (0 <= newScore && newScore <= 100) {\r\n                    validScore = true;\r\n                } else {\r\n                    System.out.println(\"점수는 0 ~ 100 점 사이로 입력해주세요.\");\r\n                }\r\n            } else {\r\n                System.out.println(\"유효한 점수를 입력해주세요.\");\r\n                sc.next(); // 잘못된 입력을 소비하여 무한 루프 방지\r\n            }\r\n        }\r\n\r\n        // 점수 수정\r\n        round.setSubject(student.getSubjectsMap(roundNumber).getSubject(subjectName), newScore);\r\n\r\n\r\n        // 점수 반영 처리 작업\r\n        Score score = student.getSubjectsMap(roundNumber).getSubject(subjectName);\r\n        if (score.getSubject().getSubjectType().equals(SUBJECT_TYPE_MANDATORY)) {\r\n            score.setMandatoryRank(newScore);\r\n        } else if (score.getSubject().getSubjectType().equals(SUBJECT_TYPE_CHOICE)) {\r\n            score.setChoiceRank(newScore);\r\n        }\r\n\r\n        System.out.println(\"점수 수정이 완료되었습니다.\");\r\n    }\r\n\r\n\r\n    // 수강생의 특정 과목 회차별 등급 조회\r\n    private static void inquireRoundGradeBySubject() {\r\n        String studentId = getStudentId(); // 관리할 수강생 고유 번호\r\n        // 기능 구현 (조회할 특정 과목)\r\n        System.out.println(\"회차별 등급을 조회합니다...\");\r\n        // 기능 구현\r\n        System.out.println(\"\\n등급 조회 성공!\");\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/camp/CampManagementApplication.java b/src/camp/CampManagementApplication.java
--- a/src/camp/CampManagementApplication.java	
+++ b/src/camp/CampManagementApplication.java	
@@ -1,5 +1,9 @@
 package camp;
 
+import camp.exceptions.HandleMisMatchRound;
+import camp.exceptions.HandleMisMatchScore;
+import camp.exceptions.HandleMisMatchSelect;
+import camp.exceptions.HandleMisMatchStudent;
 import camp.model.*;
 
 import java.util.*;
@@ -39,7 +43,7 @@
         try {
             displayMainView();
         } catch (Exception e) {
-            System.out.println("\n오류 발생!\n프로그램을 종료합니다.");
+            System.out.println("Error : " + e.getMessage());
         }
     }
 
@@ -68,7 +72,7 @@
         }
     }
 
-    private static void displayMainView() throws InterruptedException {
+    private static void displayMainView() throws InterruptedException,Exception {
         boolean flag = true;
         while (flag) {
             System.out.println("\n==================================");
@@ -190,7 +194,7 @@
         System.out.println("\n수강생 목록 조회 성공!");
     }
 
-    private static void displayScoreView() {
+    private static void displayScoreView() throws Exception {
         boolean flag = true;
         while (flag) {
             System.out.println("==================================");
@@ -222,115 +226,131 @@
     }
 
     // 수강생의 과목별 시험 회차 및 점수 등록
-    private static void createScore() {
+    private static void createScore() throws Exception {
         //학생찾기결과를 Optional 로 반환받음
         System.out.println("어떤 수강생의 과목별 시험 회차 및 점수 등록하시겠습니까? //이름을 입력해주세요!");
         String name = sc.nextLine();
-        Optional<String> findStudentId = studentStore.stream().filter(student -> student.getStudentName().equals(name)).map(Student::getStudentId).findFirst();
+        String findStudentId = studentStore.stream().filter(student -> student.getStudentName().equals(name)).map(Student::getStudentId).findFirst().orElseThrow(HandleMisMatchStudent::new);
 
         //학생찾기 성공했을시, ture,false 반환
-        if (findStudentId.isPresent()) {
             //여기까지왔다는건 무조건 findStudentId가 있다는 뜻이므로, 옵셔널 상자 개봉후, 값 반환
             //일단 삭제 고려안함, idx 고려 배제
-            Student student = studentStore.get(Integer.parseInt(findStudentId.get()) - 1);
+            Student student = studentStore.get(Integer.parseInt(findStudentId) - 1);
             boolean flag = true;
 
 
-            //학생의 필수과목 점수 기재공간
-            while (flag) {
-                System.out.println("'" + student.getStudentName() + "'의 점수를 등록하실, 필수/선택 과목을 골라주세요 //번호를 입력해주세요!");
-                System.out.println("1. 필수 2. 선택 3. 나가기");
-                int input = sc.nextInt();
+        //학생의 필수과목 점수 기재공간
+        while (flag) {
+            System.out.println("'" + student.getStudentName() + "'의 점수를 등록하실, 필수/선택 과목을 골라주세요 //번호를 입력해주세요!");
+            System.out.println("1. 필수 2. 선택 3. 나가기");
+            int input = sc.nextInt();
+            if (input != 1 && input != 2 && input != 3) throw new HandleMisMatchSelect();
 
-                //사용자가 번호를 눌렀을때 해당 필수과목으로 찾게하기위한 List
-                List<String> MmandatorySubjectList = new ArrayList<>();
-                //필수
-                if (input == 1) {
-                    System.out.println("'몇 회차' 과목의 점수를 등록 하시겠습니까?");
-                    int count = sc.nextInt();
-                    sc.nextLine();
-                    System.out.println("현재 " + student.getStudentName() + " 학생의 " + count + "회차 필수과목 점수 등록 현황 상태입니다.");
-                    //현재 학생의 n 회차까지 데이터 저장 값들
-                    int i = 1;
-                    for (Map.Entry<String, Score> subject : student.getSubjectsMap(count).getSubjects().entrySet()) {
-                        //필수과목 일때만
-                        if (subject.getValue().getSubject().getSubjectType().equals(SUBJECT_TYPE_MANDATORY)) {
-                            MmandatorySubjectList.add(subject.getKey());
-                            if (subject.getValue().getScore() == -1)
-                                //점수 등록이 안됐다면
-                                System.out.print(i + "." + subject.getKey() + " : " + "[점수미등록] ");
-                                //점수 등록이 됐다면
-                            else
-                                System.out.print(i + "." + subject.getKey() + " : " + subject.getValue().getScore() + "점 ");
-                            ++i;
-                        }
-                    }
-                    System.out.println();
-                    Round round = new Round(count);
-                    System.out.println(count + "회차의 어떤 '과목'의 점수를 등록 하시겠습니까? //번호를 입력해주세요!");
-                    int subjectNumber = sc.nextInt();
-                    String subject = MmandatorySubjectList.get(subjectNumber - 1);
+            //사용자가 번호를 눌렀을때 해당 필수과목으로 찾게하기위한 List
+            List<String> MmandatorySubjectList = new ArrayList<>();
+            //필수
+            if (input == 1) {
+                System.out.println("'몇 회차' 과목의 점수를 등록 하시겠습니까?");
+                int count = sc.nextInt();
+                //회차값이 1 ~ 10 값이 아니라면 오류던지기
+                if (!(count >= 1 && count <= 10)) {
+                    flag = false;
+                    throw new HandleMisMatchRound();
+                };
+                sc.nextLine();
+                System.out.println("현재 " + student.getStudentName() + " 학생의 " + count + "회차 필수과목 점수 등록 현황 상태입니다.");
+                //현재 학생의 n 회차까지 데이터 저장 값들
+                int i = 1;
+                for (Map.Entry<String, Score> subject : student.getSubjectsMap(count).getSubjects().entrySet()) {
+                    //필수과목 일때만
+                    if (subject.getValue().getSubject().getSubjectType().equals(SUBJECT_TYPE_MANDATORY)) {
+                        MmandatorySubjectList.add(subject.getKey());
+                        if (subject.getValue().getScore() == -1)
+                            //점수 등록이 안됐다면
+                            System.out.print(i + "." + subject.getKey() + " : " + "[점수미등록] ");
+                            //점수 등록이 됐다면
+                        else
+                            System.out.print(i + "." + subject.getKey() + " : " + subject.getValue().getScore() + "점 ");
+                        ++i;
+                    }
+                }
+                System.out.println();
+                Round round = new Round(count);
+                System.out.println(count + "회차의 어떤 '과목'의 점수를 등록 하시겠습니까? //번호를 입력해주세요!");
+                int subjectNumber = sc.nextInt();
+                if (!(subjectNumber >= 1 && subjectNumber <= MmandatorySubjectList.size())) throw new HandleMisMatchSelect();
+                String subject = MmandatorySubjectList.get(subjectNumber - 1);
 
-                    System.out.println(count + "회차의 " + subject + " 과목에 대해 '점수'를 등록 해주세요");
-                    int intScore = sc.nextInt();
-                    // n회차에대한 과목,점수 저장
-                    round.setSubject(student.getSubjectsMap(count).getSubject(subject), intScore);
-                    student.getSubjectsMap(count).getSubject(subject).setMandatoryRank(intScore);
-                    System.out.println("등록이 정상적으로 마무리 되었습니다 !");
+                System.out.println(count + "회차의 " + subject + " 과목에 대해 '점수'를 등록 해주세요");
+                int score = sc.nextInt();
+                // n회차에대한 과목,점수 저장
+                if (!(score >= 0 && score <= 100)) {
+                    flag = false;
+                    throw new HandleMisMatchScore();
+                };
+                round.setSubject(student.getSubjectsMap(count).getSubject(subject), score);
+                student.getSubjectsMap(count).getSubject(subject).setMandatoryRank(score);
+                System.out.println("등록이 정상적으로 마무리 되었습니다 !");
 
-                    //선택
-                } else if (input == 2) {
-                    System.out.println("'몇 회차' 과목의 점수를 등록 하시겠습니까?");
-                    int count = sc.nextInt();
-                    sc.nextLine();
-                    //사용자가 번호를 눌렀을때 해당 과목으로 찾게하기위한 List
-                    List<String> choiceSubjectList = new ArrayList<>();
-                    System.out.println("현재 " + student.getStudentName() + " 학생의 " + count + "회차 선택과목 점수 등록 현황 상태입니다. //번호를 입력해주세요!");
-                    //현재 학생의 n 회차까지 데이터 저장 값들
-                    int i = 1;
-                    for (Map.Entry<String, Score> subject : student.getSubjectsMap(count).getSubjects().entrySet()) {
-                        //선택과목 일때만
-                        if (subject.getValue().getSubject().getSubjectType().equals(SUBJECT_TYPE_CHOICE)) {
-                            choiceSubjectList.add(subject.getKey());
-                            if (subject.getValue().getScore() == -1)
-                                //등록이 됐다면
-                                System.out.print(i + "." + subject.getKey() + " : " + "[점수미등록] ");
-                                //점수 등록이 됐다면
-                            else
-                                System.out.print(i + "." + subject.getKey() + " : " + subject.getValue().getScore() + "점 ");
-                            ++i;
-                        }
-                    }
-                    System.out.println();
-                    Round round = new Round(count);
-                    int subjectNumber = sc.nextInt();
-                    String subject = choiceSubjectList.get(subjectNumber - 1);
+                //선택
+            } else if (input == 2) {
+                System.out.println("'몇 회차' 과목의 점수를 등록 하시겠습니까?");
+                int count = sc.nextInt();
+                if (!(count >= 1 && count <= 10)) {
+                    flag = false;
+                    throw new HandleMisMatchRound();
+                };
+                sc.nextLine();
+                //사용자가 번호를 눌렀을때 해당 과목으로 찾게하기위한 List
+                List<String> choiceSubjectList = new ArrayList<>();
+                System.out.println("현재 " + student.getStudentName() + " 학생의 " + count + "회차 선택과목 점수 등록 현황 상태입니다. //번호를 입력해주세요!");
+                //현재 학생의 n 회차까지 데이터 저장 값들
+                int i = 1;
+                for (Map.Entry<String, Score> subject : student.getSubjectsMap(count).getSubjects().entrySet()) {
+                    //선택과목 일때만
+                    if (subject.getValue().getSubject().getSubjectType().equals(SUBJECT_TYPE_CHOICE)) {
+                        choiceSubjectList.add(subject.getKey());
+                        if (subject.getValue().getScore() == -1)
+                            //등록이 됐다면
+                            System.out.print(i + "." + subject.getKey() + " : " + "[점수미등록] ");
+                            //점수 등록이 됐다면
+                        else
+                            System.out.print(i + "." + subject.getKey() + " : " + subject.getValue().getScore() + "점 ");
+                        ++i;
+                    }
+                }
+                System.out.println();
+                Round round = new Round(count);
+                int subjectNumber = sc.nextInt();
+                if (!(subjectNumber >= 1 && subjectNumber <= MmandatorySubjectList.size())) throw new HandleMisMatchSelect();
+                String subject = choiceSubjectList.get(subjectNumber - 1);
 
-                    System.out.println(count + "회차의 " + subject + " 과목에 대해 '점수'를 등록 해주세요");
-                    int score = sc.nextInt();
+                System.out.println(count + "회차의 " + subject + " 과목에 대해 '점수'를 등록 해주세요");
+                int score = sc.nextInt();
+                //점수가 0 ~ 100 사이가 아닐경우
+                if (!(subjectNumber >= 0 && subjectNumber <= 100)) {
+                    flag = false;
+                    throw new HandleMisMatchScore();
+                };
 
-                    // n회차에대한 과목,점수 저장
-                    round.setSubject(student.getSubjectsMap(count).getSubject(subject), score);
-                    student.getSubjectsMap(count).getSubject(subject).setChoiceRank(score);
-                    System.out.println(student.getSubjectsMap(count).getSubject(subject).getChoiceRank());
-                    System.out.println("등록이 정상적으로 마무리 되었습니다 !");
-                } else {
-                    flag = false;
-                    return;
-                }
-                //sc.nextInt() 하고나서는 개행문자 하나 새로생겨서 다음 작업에 오차 생길수있기떄문에, 하나 미리 띄어두기
-                sc.nextLine();
-            }
+                // n회차에대한 과목,점수 저장
+                round.setSubject(student.getSubjectsMap(count).getSubject(subject), score);
+                student.getSubjectsMap(count).getSubject(subject).setChoiceRank(score);
+                System.out.println(student.getSubjectsMap(count).getSubject(subject).getChoiceRank());
+                System.out.println("등록이 정상적으로 마무리 되었습니다 !");
+            } else {
+                flag = false;
+                return;
+            }
+            //sc.nextInt() 하고나서는 개행문자 하나 새로생겨서 다음 작업에 오차 생길수있기떄문에, 하나 미리 띄어두기
+            sc.nextLine();
+        }
 
-            // ===== 랑 같이 출력되서 한줄 띄어줌
-            System.out.println();
-            return;
-            //학생찾기 실패시, 해당 함수 종료시키면서 돌려보냄
-        } else {
-            System.out.println("학생이 존재하지않습니다!");
-            return;
-        }
-    }
+        // ===== 랑 같이 출력되서 한줄 띄어줌
+        System.out.println();
+        return;
+        //학생찾기 실패시, 해당 함수 종료시키면서 돌려보냄
+}
 
     // 수강생의 과목별 회차 점수 수정 메서드
     private static void updateRoundScoreBySubject() {
